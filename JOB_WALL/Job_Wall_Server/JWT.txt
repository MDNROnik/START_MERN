/**
 * 1. after successful login: generate a jwt token in backend
 * npm i jsonwebtoken, cookie-parser
 *
 *
 * set data in payload, and secret code 
 * made secret code by // require('crypto').randomBytes(64).toString('hex')
 * 
 * jwt.sign(payload, secret, {expiresIn: '1d'})
 * 
 * 
 * 2. send token (generated in the server side) to the client side
 * local storage --> easier 
 * 
 * httpOnly cookies ---> better
 * 
 * set token to the cookie 
 * res.cookie('token', token, {
 *      httpOnly: true,
 *      secure: false
 * })
 * 
 * 3. for sensitive or secure or private or protected apis: send token to the server side
 * 
 * on the server side: 
 * app.use(cors({
 *   origin: ['http://localhost:5173'], // all site where token came from 
 *   credentials: true  // can use those token
 * }));
 * 

 * in the client side: 
 * use axios get , post, delete, patch for secure apis and must use: {withCredentials: true} // said that can use token
 * 
 * 
 * 
 * set e funciton where a token can be store and also check validation
 * 
 * 
 * 
 * 4. validate the token in the server side: 
 * if valid: provide data
 * if not valid: logout
 * 
 * 5. check right user accessing his/her own data based on permission
 * 
 * 
 * 
*/